/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Secretary;
import Interfaces.IPatient;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.io.Reader;
import java.io.IOException;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import javax.swing.JOptionPane;

/**
 *
 * @author Lewis
 */
public class NewPatients extends javax.swing.JFrame implements IPatient {
    public String firstname, lastname, address, age, gender;

    /**
     * Creates new form NewPatients
     */
    public NewPatients() {
        initComponents();
        LoadPatients();
    }
    
    public String getPatients()
    {
        return firstname;
    }
    public String getFirstname() {
        return firstname;
    }

    public String getLastname() {
        return lastname;
    }

    public String getAddress() {
        return address;
    }

    public String getAge() {
        return age;
    }

    public String getGender() {
        return gender;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbPatients = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblFirstName = new javax.swing.JLabel();
        lblSurname = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        confirmPatient = new javax.swing.JToggleButton();
        confirmPatient1 = new javax.swing.JToggleButton();
        jLabel4 = new javax.swing.JLabel();
        tfID = new javax.swing.JTextField();

        jLabel1.setText("New patients");

        cbPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPatientsActionPerformed(evt);
            }
        });

        jLabel2.setText("Choose a patient to approve:");

        jLabel3.setText("Patient Information:");

        lblFirstName.setText("First Name");

        lblSurname.setText("Surname");

        lblAddress.setText("Address");

        lblGender.setText("Gender");

        lblAge.setText("Age");

        jLabel9.setText("If any of this is incorrect, you can change it through Patient Management.");

        confirmPatient.setText("Confirm Patient");
        confirmPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmPatientActionPerformed(evt);
            }
        });

        confirmPatient1.setText("Close Window");

        jLabel4.setText("Choose a patient ID:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbPatients, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblFirstName))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblSurname))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblAddress))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblGender))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblAge))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(32, 32, 32)
                            .addComponent(confirmPatient)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(confirmPatient1))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel9)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfID, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbPatients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblFirstName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSurname)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAddress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblGender)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAge)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmPatient)
                    .addComponent(confirmPatient1))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPatientsActionPerformed
        // TODO add your handling code here:
        updatePatients();
    }//GEN-LAST:event_cbPatientsActionPerformed

    private void confirmPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmPatientActionPerformed
        // TODO add your handling code here:
        ApprovePatient();
        JOptionPane.showMessageDialog(null, "Successfully added patient!");
        
    }//GEN-LAST:event_confirmPatientActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewPatients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewPatients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewPatients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewPatients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewPatients().setVisible(true);
            }
        });
    }
    private void updatePatients()
    {
        JSONParser parser = new JSONParser();
try (Reader reader = new FileReader("JSON/NewPatients.json")) 
        {
            
            JSONObject jsonObject = (JSONObject) parser.parse(reader); //Parse the JSON object
            JSONArray newPatientsArray = (JSONArray) jsonObject.get("NewPatients");
            for (int i = 0; i < newPatientsArray.size(); i++) {
                JSONObject current = (JSONObject) newPatientsArray.get(i);
                String name = current.get("firstname") + " " + current.get("surname");
                if (name.equals(cbPatients.getSelectedItem().toString()))
                        {
                            firstname = current.get("firstname").toString();
                            lastname = current.get("surname").toString();
                            address = current.get("address").toString();
                            gender = current.get("gender").toString();
                            age = current.get("age").toString();
                            lblFirstName.setText("First Name: " + getFirstName());
                            lblSurname.setText("Last Name: " + getLastName());
                            lblAddress.setText("Address: " + getAddress());
                            lblGender.setText("Gender: " + getGender());
                            lblAge.setText("Age: " + getAge());                            
                        }
            }
        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        catch (ParseException e) 
        {
            e.printStackTrace();
        }
    }
    private void LoadPatients()
    {
        JSONParser parser = new JSONParser();
try (Reader reader = new FileReader("JSON/NewPatients.json")) 
        {
            
            JSONObject jsonObject = (JSONObject) parser.parse(reader); //Parse the JSON object
            JSONArray newPatientsArray = (JSONArray) jsonObject.get("NewPatients");
            for (int i = 0; i < newPatientsArray.size(); i++) {
                JSONObject current = (JSONObject) newPatientsArray.get(i);
                String name = current.get("firstname") + " " + current.get("surname");
                cbPatients.addItem(name);
            }
        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        catch (ParseException e) 
        {
            e.printStackTrace();
        }

    }
    private void ApprovePatient()
    {
        JSONObject approvedPatient = new JSONObject();
        approvedPatient.put("firstname", getFirstName());
        approvedPatient.put("surname", getLastName());
        approvedPatient.put("address", getAddress());
        approvedPatient.put("age", getAge());
        approvedPatient.put("gender", getGender());
        approvedPatient.put("username", "P" + tfID.getText());
        approvedPatient.put("password", "password");
        JSONParser parser = new JSONParser();
try (Reader reader = new FileReader("JSON/Patients.json")) 
        {
            
            JSONObject jsonObject = (JSONObject) parser.parse(reader); //Parse the JSON object
            JSONArray newPatientsArray = (JSONArray) jsonObject.get("patients");
            newPatientsArray.add(approvedPatient);
            FileWriter JSONFile = new FileWriter("JSON/Patients.json");
            String intro = ("{" + (char)34 + "patients" + (char)34) + ":";
            JSONFile.write(intro + newPatientsArray.toJSONString() + "}");
            JSONFile.flush();
            JSONFile.close();
    }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        catch (ParseException e) 
        {
            e.printStackTrace();
        }
    try (Reader reader = new FileReader("JSON/NewPatients.json")) 
        {
            
            JSONObject jsonObject = (JSONObject) parser.parse(reader); //Parse the JSON object
            JSONArray newPatientsArray = (JSONArray) jsonObject.get("NewPatients");
            for (int i = 0; i < newPatientsArray.size(); i++) {
                JSONObject current = (JSONObject) newPatientsArray.get(i);
                if (current.get("firstname").equals(getFirstName().toString()))
                {
                    newPatientsArray.remove(i);
                }
                FileWriter JSONFile = new FileWriter("JSON/NewPatients.json");
            String intro = ("{" + (char)34 + "NewPatients" + (char)34) + ":";
            JSONFile.write(intro + newPatientsArray.toJSONString() + "}");
            JSONFile.flush();
            JSONFile.close();
            }
            
    }
    catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        catch (ParseException e) 
        {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbPatients;
    private javax.swing.JToggleButton confirmPatient;
    private javax.swing.JToggleButton confirmPatient1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblSurname;
    private javax.swing.JTextField tfID;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getFirstName() {
        return firstname;
    }

    @Override
    public String getLastName() {
        return lastname;
    }

}
