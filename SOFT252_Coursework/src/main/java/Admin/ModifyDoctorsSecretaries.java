/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Admin;

import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.io.Reader;
import java.util.Iterator;
import java.io.IOException;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.FileWriter;

/**
 *
 * @author Lewis
 */
public class ModifyDoctorsSecretaries extends javax.swing.JFrame {

    /**
     * Creates new form ModifyDoctorsSecretaries
     */
    public ModifyDoctorsSecretaries() {
        initComponents();
        fillDoctorsSecretaries();
    }
    
    private void fillDoctorsSecretaries()
    {
      fillComboBox("src/main/java/JSON/doctors.json", "doctors");
      fillComboBox("src/main/java/JSON/Secretaries.json", "secretaries");
        
    }
    private void fillComboBox(String fileLocation, String arrayName)
    {
        JSONParser parser = new JSONParser();
        try (Reader reader = new FileReader(fileLocation)) 
        {
            
            JSONObject jsonObject = (JSONObject) parser.parse(reader); //Parse the JSON object
            JSONArray doctors = (JSONArray) jsonObject.get(arrayName);
            for (int i = 0; i < doctors.size(); i++) {
                JSONObject currentPatient = (JSONObject) doctors.get(i);
                String patientID = currentPatient.get("username").toString();
                cbDocsSec.addItem(patientID);
            }
        
        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        catch (ParseException e) 
        {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbDocsSec = new javax.swing.JComboBox<>();
        chbDoc = new javax.swing.JCheckBox();
        chbSec = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tfUsername = new javax.swing.JTextField();
        tfFName = new javax.swing.JTextField();
        tfAddress = new javax.swing.JTextField();
        tfLName = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        tfPassword = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Add or Remove Doctor/Secretaries");

        jLabel2.setText("Choose a Doctor or Secretary:");

        chbDoc.setText("New Doctor");

        chbSec.setText("New Secretary");

        jLabel3.setText("Remove a doctor or secretary");

        jLabel4.setText("Add a Doctor/Secretary");

        jButton1.setText("Remove selected");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("First Name");

        jLabel6.setText("Last Name");

        jLabel7.setText("Address");

        jLabel8.setText("Username");

        jButton2.setText("Add user");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setText("Password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(chbDoc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chbSec)
                .addGap(69, 69, 69))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbDocsSec, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfLName, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfFName, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jButton2)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbSec)
                    .addComponent(chbDoc))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tfFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tfLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbDocsSec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //This code determines where to write the new user to
        //State pattern
        if (chbSec.isSelected() == true && chbDoc.isSelected() == true) //Both new doctor and new secretary are chosen, State 0 - Error, no additions are run.
        {
            JOptionPane.showMessageDialog(null, "You have selected both a new doctor and secretary. Please amend this.");
        }
        else if (chbSec.isSelected() == true) //new secretary is chosen. State 1 - Adding new secretary.
        {
            char s = 'S';
            if (tfUsername.getText().charAt(0) == s) //Initial check to ensure that the first letter of the username is consistent.
            {
                //Check that all boxes have been filled
                if (!tfFName.getText().equals("") && !tfLName.getText().equals("") &&
                        !tfAddress.getText().equals("") && !tfPassword.getText().equals("")) //Ensure there is data in every text box
                {
                    JSONObject newSecretary = new JSONObject();
                    newSecretary.put("firstname", tfFName.getText());
                    newSecretary.put("surname", tfLName.getText());
                    newSecretary.put("address", tfAddress.getText());
                    newSecretary.put("username", tfUsername.getText());
                    newSecretary.put("password", tfPassword.getText());
                    addNewPerson(newSecretary, "src/main/java/JSON/Secretaries.json", ""); //Run method to add a new secretary
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "You have not filled one of the text boxes.");
                }
            }
            else
            {
                 JOptionPane.showMessageDialog(null, "You have put the incorrect start to the username.");
            }
            //Add new secretary
        }
        else if (chbDoc.isSelected() == true) //new doctor has been selected - State 2 - Adding new doctor.
        {
            char D = 'D';
            if (tfUsername.getText().charAt(0) == D)
            {
                 if (!tfFName.getText().equals("") && !tfLName.getText().equals("") &&
                        !tfAddress.getText().equals("") && !tfPassword.getText().equals("")) //check all boxes have data
                {
                    JSONObject newDoctor = new JSONObject();
                    newDoctor.put("firstname", tfFName.getText());
                    newDoctor.put("surname", tfLName.getText());
                    newDoctor.put("address", tfAddress.getText());
                    newDoctor.put("username", tfUsername.getText());
                    newDoctor.put("password", tfPassword.getText());
                    addNewPerson(newDoctor, "src/main/java/JSON/doctors.json", "doctors"); //Run method to get a new doctor
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "You have not filled one of the text boxes.");
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "You have put the incorrect start to the username.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        workOutAccountType();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void workOutAccountType() //This method is called when removing an account
    {
        char D = 'D';
        if (cbDocsSec.getSelectedItem().toString().charAt(0) == D) //Doctor IDs always start with D, therefore this is used
        {
            removeAccount("src/main/java/JSON/doctors.json", "doctors");
            cbDocsSec.removeAllItems();
                  fillComboBox("src/main/java/JSON/doctors.json", "doctors");
                  fillComboBox("src/main/java/JSON/Secretaries.json", "secretaries");
                  JOptionPane.showMessageDialog(null, "Successfully removed doctor.");
        }
        else
        {
            removeAccount("src/main/java/JSON/Secretaries.json", "secretaries");
                  fillComboBox("src/main/java/JSON/doctors.json", "doctors");
                  fillComboBox("src/main/java/JSON/Secretaries.json", "secretaries");
                  JOptionPane.showMessageDialog(null, "Successfully removed secretary.");
        }
    }
    private void removeAccount(String fileName, String arrayName) //Code to remove the account using FileWriter and JSONArray manipulation
    {
        JSONParser parser = new JSONParser();
        try (Reader reader = new FileReader(fileName)) 
        {
            
            JSONObject jsonObject = (JSONObject) parser.parse(reader); //Parse the JSON object
            JSONArray array = (JSONArray) jsonObject.get(arrayName);
            for (int i = 0; i < array.size(); i++) {
                JSONObject currentPatient = (JSONObject) array.get(i);
                String username = currentPatient.get("username").toString();
                if (username.equals( cbDocsSec.getSelectedItem()))
                {
                    array.remove(i);
                }
            }
            FileWriter JSONFile = new FileWriter(fileName);
        try
        {
            String intro = ("{" + (char)34 + arrayName + (char)34) + ":";
            JSONFile.write(intro + array.toJSONString() + "}");
            JSONFile.flush();
            JSONFile.close();

        }
        catch (IOException e)
                {
                    e.printStackTrace();
                }
            
        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        catch (ParseException e) 
        {
            e.printStackTrace();
        } 
    }
    public void addNewPerson(JSONObject newPerson, String fileName, String arrayName) //Code to add a new secretary
    {
        JSONParser parser = new JSONParser();
        try (Reader reader = new FileReader(fileName)) 
        {
            
            JSONObject jsonObject = (JSONObject) parser.parse(reader); //Parse the JSON object
            JSONArray secretaries = (JSONArray) jsonObject.get(arrayName); //Obtain the full array of secretaries
            secretaries.add(newPerson); //Add in the new doctor
            FileWriter JSONFile = new FileWriter(fileName);
                try
                {
                    //Writing code
                    String intro = ("{" + (char)34 + arrayName + (char)34) + ":"; //Used for the start of JSONArrays
                    JSONFile.write(intro + secretaries.toJSONString() + "}");
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                }
                JSONFile.flush(); 
                JSONFile.close(); //Write and apply changes
                JOptionPane.showMessageDialog(null, "Successfully added new secretary!");
            
        
        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        catch (ParseException e) 
        {
            e.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModifyDoctorsSecretaries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModifyDoctorsSecretaries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModifyDoctorsSecretaries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModifyDoctorsSecretaries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModifyDoctorsSecretaries().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbDocsSec;
    private javax.swing.JCheckBox chbDoc;
    private javax.swing.JCheckBox chbSec;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField tfAddress;
    private javax.swing.JTextField tfFName;
    private javax.swing.JTextField tfLName;
    private javax.swing.JTextField tfPassword;
    private javax.swing.JTextField tfUsername;
    // End of variables declaration//GEN-END:variables
}
